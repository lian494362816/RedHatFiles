1

	type : char short int long float double long double
	name : 
	value : 

	对变量操作：
		1 算术运算符：+ - * / % ++ --

		main 中定义变量，如果未初始化，其值是一个随机数.
		定义局部变量为初始化，值为随机数。

		打印一个%,必须写2个%

		2 关系运算符：> < >= <= != ==
			结果值：要么成立 => 1，要么不成立 => 0
		3 逻辑运算符：
			逻辑与：&&
				每一个条件都为逻辑真，则结果值为真
				如果有一个为逻辑假，则结果值为假
			逻辑或：||
				如果有一个条件为逻辑真，则结果为真
				如果全部条件为逻辑假，则结果为假
			逻辑非：!
				如果为逻辑假，则结果为真
				如果为逻辑真，则结果为假

			逻辑真：非零
			逻辑假：0

			结果值：
				结果真：1
				结果假：0
		4 位运算符：& | ~ ^ >> <<
			位与：0 1
				1 & 1 = 1
				1 & 0 = 0
				0 & 1 = 0
				0 & 0 = 0
				如果有一个为0，则结果为0
			位或：
				1 | 1 = 1
				1 | 0 = 1
				0 | 1 = 1
				0 | 0 = 0
				如果有一个为1，则结果为1
				
			取反：
				1 -> 0
				0 -> 1

			正数：源码方式体现
			负数：补码方式体现
				补码：取负数绝对值 -> 正数 -> 源码 -> 取反 + 1 => 补码	

			如何区分正数和负数：
				看最高位，	如果最高位为1，则表示是一个负数
							如果最高位为0，则表示是一个正数

			异或：^
				1 ^ 1 = 0
				1 ^ 0 = 1
				0 ^ 1 = 1
				0 ^ 0 = 0
				相异则为1，相同则为0
			移位：
				算术移位：
					考虑符号位
				逻辑移位：
					不考虑符号位

			>> : 右移
				格式：num >> bit
				正数 ：低位丢掉，高位补0
				负数 ：低位丢掉。高位补1

				结论：低位丢掉，高位补符号位  
				通过以上案例，得到右移叫算术右移
			<< : 左移
				格式：num << bit
				正数： 高位丢掉，低位补0
				负数： 高位丢掉，低位补0
				
				通过以上案例，左移叫逻辑左移。
		5 赋值运算符：
			= += -= *= /= %= |= &= ^= >>= <<=
		6 逗号运算符
			,
		7 条件运算符
			格式：con ? true : false;
			c语言唯一的一个三目录运算符

			如果条件成立，则执行?后面语句，如果条件不成立，则执行:后面语句。
		8 求空间大小运算符：sizeof()
		9 () [] & * . ->

	输入输出：
		标准输入：	键盘	stdin
		标准输出：	显示器	stdout
		错误输出：	显示器	stderr


		int printf(const char *format, ...);
			默认输出显示器
		int fprintf(FILE *stream, const char *format, ...);
			指向输出方向
			第一个就是文件指针，
		int sprintf(char *str, const char *format, ...);
			指定输出到地址空间上
		int snprintf(char *str, size_t size, const char *format,
				...);

			size : 表示地址空间大小
		
		指定数据对齐方式：
			+:	表示右对齐 默认
			-:  表示左对齐

		如果浮点数：
			m.n : 	m 表示整个数据位宽
					n 表示小数数据位宽

				实际有效位大于m,就按实际有效位输出
				如果小于，则怖空格。

	================================
	执行效率：
	空间效率：
	格式：
	注释：
		行注释：//
		块注释: /* */

		vim 插件
		1 下载.vim目录
		2 拷贝目录到当前用户家目录
			\cp .vim ~/ -rf
		3 使用
			,cc : 表示注释一行
			,cs : 表示注释多行
			,cu : 表示取消注释

	注释：
		1 可不可以嵌套 /**/ 不可以嵌套
		2 代码任何位置都可以注释吗？
			不可以

	===============================

	类型转换：
		隐式转换：
			1 赋值转换
			2 运算转换
			3 返回转换
			4 传参转换
		char -> short -> int -> long -> doubel <- float
		显示转换：强制类型转换
			format : (type)varname
=========================================
	
	1 实现两个数交换(三种方法)
	2 输入整数(int)-> 32
		0 1 2 4 => 1
		7 9 11 13 => 0
		其它位保持不变
	3 输入一个字符，如果是字母，要求大小写转换，如果不是字母，则原样输出。











