C:
	可以直接操作硬件
	计算机只识别 0 1 

1 : 入口
	main -> printf -> hello
2 : 变量
	定义变量：var_type var_name = value
	var_type:	char short int long float double long double
		决定变量空间大小
		数据大小
		执行操作
	var_name : 绝对变量地址
	value	:  就是变量内容
3 ： 函数
	就是把通用功能进行封装，以供其他用户调用。

1 c语言基本语句和流程控制
2 函数
	makefile .so .a
3 数组 -> 重点
	int  char => 一维数组
	一维数组和函数关系
	str家族函数
	多维数组
	多维数组和函数关系
	VT
4 指针 -> 难点
	void *
	一级指针
	虚拟内存
	一级指针和函数关系
	一级指针和数组关系
	多极指针
	多极指针和函数关系

	指针函数
	函数指针
	数组指针
	指针数组

5 结构体 共用体 枚举
6 预处理
7 file IO
=========================

main() -> 入口

	函数基本格式
	func_type func_name(argumentlist)
	{
		body;
	}

	标准
	int main(void)
	{
		
	}

	int 	: 表示函数返回值类型 %d
	main 	: 表示函数名，一个程序有且之能有一个main函数
	()		: 表示函数参数
		void : 表示不接受外部传参
	{}		: 表示函数体
		就是函数功能实现

	man 3 printf
	#include <stdio.h> 
	要调用printf函数，就必须包含头文件

	功能：就是输出一条语句
	int printf(const char *format, ...); C库函数
	第一个参数：表示格式
	...			: 表示不定参 可变参

	\n : 表示换行


	一个源文件生成可执行二进制文件步骤：
	1 预处理：.i
		处理头文件 宏命令 条件编译和特殊字符
		头文件 宏命令 条件编译 统称伪代码 展开放在源文件中
		gcc -E src.c -o src.i
	2 编译:.s 生成汇编代码
		检查语法错误和词法规则
		gcc -S src.i -o src.s
	3 汇编：.o 生成目标代码
		gcc -c src.s -o src.o

	4 链接：链接共享库
		动态库和静态库
		.so .a
	vim : 编辑器 程序开发器
	gcc : 编译器 翻译器
	gcc filename.c => a.out
	＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	变量：
		定义变量格式：
			format : type name = value
		变量类型：32 64
			char 		: 字符		'a' 'A' '1' -> 1 	%c
			short 		：短整形	123 456		-> 2	%d
			int 		：整形		123			-> 4	%d
			long 		：长整形	123			-> 4	%ld
			float 		：单精度	1.23		-> 4	%f
			doubel 		：双精度	1.23		-> 8	%f
			long double ：长双精度类型 1.23		-> 12	%lf

			%s -> 字符串 
			%p -> 地址
			%o %O %#o	-> 八进制
			%x %X %#x 	-> 十六进制
			%u	-> 无符号整形

		求变量空间大小：sizeof()
			可以是变量名 ，同时也可以类型名

	
		决定变量取值范围：

		绝对执行操作：


		变量名	：
		变量值	：


	

	[root@aa 1st]# gcc hello.c 	编辑源文件
		编译后，默认生成一个可执行文件a.out
	[root@aa 1st]# ./a.out 		表示执行文件





























